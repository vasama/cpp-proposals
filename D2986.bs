<pre class='metadata'>
Text Macro: PAPERNUMBER 2986
Title: Generic Function Pointer
Revision: 1
Status: D
Group: WG21
Audience: EWG
Abstract: We propose to introduce an equivalent of the void pointer for constexpr type-erasure of function pointers.

Repository: vasama/wg21
Local Boilerplate: computed-metadata yes
</pre>

# Changelog # {#changelog}

## Revision 1 ## {#changelog_r1}
  * A generic function pointer pointing to a function with noexcept specification can be converted to a non-generic function pointer without noexcept specification.

# Motivation # {#motivation}

Since C++ was first standardised, `void*` has served to erase the types of pointers to objects. Type-erasure of functions, as well as type-erasure in general, is known to be widely useful. This is exemplified by the existence of the standard library templates `std::function`, `std::move_only_function`, and the `std::function_ref` now accepted for C++26, as well the existing language mechanisms for directly type-erasing function pointers (see [[#alternatives]]).

None of the currently available mechanisms for type-erasure of function pointers are available during constant evaluation however. With [[P2738R1]] now accepted for C++26, and bringing with it constexpr conversion from `void*` back to the original type, these existing solutions seem especially lacking in comparison.

## `std::function_ref` ## {#motivation_function_ref}

[[P0792R14]] introducing `function_ref`, a type-erased callable reference, has been accepted for C++26.
`function_ref` notably lacks constexpr support for invocation and for construction from a function pointer:
<xmp>
// [func.wrap.ref.ctor], constructors and assignment operators
template<class F> function_ref(F*) noexcept;

// [func.wrap.ref.inv], invocation
R operator()(ArgTypes...) const noexcept(noex);
</xmp>

Neither of these operations is implementable in constexpr due to the lack of a constexpr type-erasure mechanism for function pointers. From <a href="[CPP]/func.wrap.ref.class">[func.wrap.ref.class]</a>:
<blockquote>
An object of class `function_ref<R(Args...) cv noexcept(noex)>` stores a pointer to function <i>thunk-ptr</i> and an object <i>bound-entity</i>. <i>bound-entity</i> has an unspecified trivially copyable type `BoundEntityType`, that models `copyable` and is capable of storing a pointer to object value or a pointer to function value. The type of <i>thunk-ptr</i> is `R(*)(BoundEntityType, Args&&...) noexcept(noex)`.
</blockquote>
C++ currently offers no way to implement the described `BoundEntityType` for use during constant evaluation because it is must be <q>capable of storing ... a pointer to function value.</q>

The reference implementation for `function_ref` can be found at <a href="https://github.com/zhihaoy/nontype_functional/tree/v1.0.1">zhihaoy/nontype_functional@v1.0.1</a>.

Here is the definition of `BoundEntityType` (`storage`) from the reference implementation:
<xmp>
struct _function_ref_base
{
    union storage
    {
        void *p_ = nullptr;
        void const *cp_;
        void (*fp_)();

        constexpr storage() noexcept = default;

        template<class T> requires std::is_object_v<T>
        constexpr explicit storage(T *p) noexcept : p_(p)
        {}

        template<class T> requires std::is_object_v<T>
        constexpr explicit storage(T const *p) noexcept : cp_(p)
        {}

        template<class T> requires std::is_function_v<T>
        constexpr explicit storage(T *p) noexcept
            : fp_(reinterpret_cast<decltype(fp_)>(p))
        {}
    };

    template<class T> constexpr static auto get(storage obj)
    {
        if constexpr (std::is_const_v<T>)
            return static_cast<T *>(obj.cp_);
        else if constexpr (std::is_object_v<T>)
            return static_cast<T *>(obj.p_);
        else
            return reinterpret_cast<T *>(obj.fp_);
    }
};
</xmp>
Note that while the function pointer constructor and the function `get` are both marked `constexpr`, due to the use of `reinterpret_cast`, the former can never result in a constant expression and the latter can only do so when `T` is not a function type.

# Existing alternatives # {#alternatives}

C++ offers two existing solutions for type-erasure of function pointers, each with its own downsides:

## Conversion to `void*` ## {#alternatives_void_ptr}

Conversions between pointers to functions and pointers to objects are conditionally supported:

<xmp>
void print_int(int value) {
    printf("%d\n", value);
}

int main() {
    auto fp = reinterpret_cast<void*>(print_int);
    reinterpret_cast<void(*)(int)>(fp)(42);
}
</xmp>

The first downside is obvious: This solution is not portable. Requiring unconditional support for this conversion may exclude some exotic platforms where pointers to functions and pointers to objects have different storage requirements. It may also introduce difficulties for implementation of pointer comparisons on Harvard architectures, where the same bit patterns may be reused for both pointers pointing to data and code.

Moreover, the use of `void*` for type-erasing function pointers conflates data and functions and may lead to accidentally passing the `void*` to functions such as `memcpy` or `free`. Due to the fundamental incompatibility of these pointers, any such code should be ill-formed to prevent mistakes, which is not possible if `void*` is used.

Finally, making the conversion from a function pointer to `void*` implicit may not be backwards compatible due to its effects on overload resolution and it would further exacerbate the type safety issue due to the existing conversions between functions and function pointers.

For these reason we do not consider this to be a viable solution.

## Conversion to `R(*)()` ## {#alternatives_func_ptr}

Conversions between different types of pointers to functions are allowed and converting back to the original type yields the original value:

<xmp>
void print_int(int value) {
    printf("%d\n", value);
}

int main() {
    using fp_t = void(*)();
    auto fp = reinterpret_cast<fp_t>(print_int);
    reinterpret_cast<void(*)(int)>(fp)(42);
}
</xmp>

This conversion requires the use of a reinterpret cast, which is not a constant expression in either direction. Making reinterpret cast expressions constant expressions would arguably represent a larger change to the language than what is proposed by this paper.

The user must make a choice of some concrete function pointer type to represent a type-erased function pointer, `void(*)()` being an obvious choice. If care is not taken, such converted pointers will remain invocable, which would lead to undefined behaviour. A better but less obvious choice is `void(*)(incomplete)`, where `incomplete` is an incomplete class type, making invocations of such a function pointer type ill-formed. In any case, each user will pick a different type to represent type-erased function pointers.

This solution could be improved upon by making the reinterpret cast a constant expression and introducing an uninvocable function pointer type alias in the standard library for the purpose of type-erasure. However, we believe that even so this solution would be inferior to what is proposed by this paper.

# Design # {#design}

Introduce a new core language type, the <i>generic function pointer type</i> under the library name `std::function_ptr_t`.
This type is a function pointer type behaving similarly to the void pointer:
  * `nullptr_t` is implicitly convertible to a generic function pointer.
    This conversion is a constant expression.
    <xmp>
    constexpr std::function_ptr_t fp_0 = nullptr;
    </xmp>
  * Any non-generic function pointer is implicitly convertible to a generic function pointer.
    This conversion is a constant expression.
    <xmp>
    constexpr int f() {
      return 42;
    }
    constexpr std::function_ptr_t fp_f = f;
    </xmp>
  * Two generic function pointers can be compared for equality.
    This comparison is a constant expression.
    <xmp>
    static_assert( fp_0 == nullptr );
    static_assert( fp_f != nullptr );
  
    constexpr int g() {
      return 0;
    }
    static_assert( fp_f == f );
    static_assert( fp_f != g );
    </xmp>
  * A generic function pointer `fp` is explicitly convertible to a non-generic function pointer type `F*` using `static_cast`.
    This conversion is a constant expression if the type of the function pointed to by `fp` is exactly `F` or `F` with `noexcept` specification.
    <xmp>
    constexpr auto p_f = static_cast<int(*)()>(fp_f);
    static_assert( p_f == f );
    static_assert( p_f() == 42 );

    constexpr int h() noexcept {
      return 123;
    }
    constexpr std::function_ptr_t fp_h = h;
    constexpr auto p_h = static_cast<int(*)()>(fp_h);
    static_assert( p_h == h );
    static_assert( p_h() == 123 );
    </xmp>
  * Unlike a non-generic function pointer, a generic function pointer can neither be invoked nor dereferenced.
    <xmp>
    fp_f(); // ill-formed
    *fp_f; // ill-formed
    </xmp>

The alias `std::function_ptr_t` for this type is introduced in the `<cstddef>` header.

## Example usage in `function_ref` ## {#design_function_ref}

Here is the `function_ref` reference implementation seen in [[#motivation_function_ref]] again, shown with changes permitted by this proposal to make it fully usable during constant evaluation:

<pre>
struct _function_ref_base
{
    union storage
    {
        void *p_ = nullptr;
        void const *cp_;
<del>        void (*fp_)();</del>
<ins>        std::function_ptr_t fp_;</ins>

        constexpr storage() noexcept = default;

        template&lt;class T&gt; requires std::is_object_v&lt;T&gt;
        constexpr explicit storage(T *p) noexcept : p_(p)
        {}

        template&lt;class T&gt; requires std::is_object_v&lt;T&gt;
        constexpr explicit storage(T const *p) noexcept : cp_(p)
        {}

        template&lt;class T&gt; requires std::is_function_v&lt;T&gt;
        constexpr explicit storage(T *p) noexcept
<del>            : fp_(reinterpret_cast&lt;decltype(fp_)&gt;(p))</del>
<ins>            : fp_(p)</ins>
        {}
    };

    template&lt;class T&gt; constexpr static auto get(storage obj)
    {
        if constexpr (std::is_const_v&lt;T&gt;)
            return static_cast&lt;T *&gt;(obj.cp_);
        else if constexpr (std::is_object_v&lt;T&gt;)
            return static_cast&lt;T *&gt;(obj.p_);
        else
<del>            return reinterpret_cast&lt;T *&gt;(obj.fp_);</del>
<ins>            return static_cast&lt;T *&gt;(obj.fp_);</ins>
    }
};
</pre>

# C compatibility # {#c_compatibility}

<a href="https://www.open-std.org/jtc1/sc22/wg14/www/docs/n2230.htm">[WG14 N2230]</a> Proposed a similar type under the name `funcptr_t`, and while WG14 expressed interest in such a type, the design presented in that proposal did not gain consensus. The author has not since followed up on that paper.

We intend to propose the introduction of a C++ compatible `function_ptr_t` type to WG14.


# Proposed Wording (incomplete) # {#wording}

Add a new clause to <a href="[CPP]/basic.fundamental">[basic.fundamental]</a>:

<blockquote>
The type named by `std::function_ptr_t` is called the <i>generic function pointer type</i>.
A value of that type can be used to point to functions of unknown type.
Such a pointer shall be able to hold any function pointer.
</blockquote>

Add a new clause to <a href="[CPP]/conv.fctptr">[conv.fctptr]</a>:

<blockquote>
A prvalue of type "pointer to function" can be converted to a prvalue of type `std::function_ptr_t`. The pointer value is unchanged by this conversion.
</blockquote>


Add a new clause to <a href="[CPP]/expr.static.cast">[expr.static.cast]</a>:

<blockquote>
A prvalue of type `std::function_ptr_t` can be converted to a prvalue of type "pointer to function". The pointer value is unchanged by this conversion.
</blockquote>


Add a new type alias to <a href="[CPP]/cstddef.syn">[cstddef.syn]</a>:

<pre>
namespace std {
  using function_ptr_t = <i>generic function pointer type</i>; // freestanding
}
</pre>
